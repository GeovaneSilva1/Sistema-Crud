unit uFiltro;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, ExtCtrls, Mask, DB, DBTables;

type
  TfrmFiltro = class(TForm)
    Panel1: TPanel;
    edFiltroNome: TEdit;
    edFiltroCpfCnpj: TMaskEdit;
    Label1: TLabel;
    rgCpfCnpj: TRadioGroup;
    GroupBox1: TGroupBox;
    GroupBox2: TGroupBox;
    edFiltroDataDe: TMaskEdit;
    edFiltroDataAte: TMaskEdit;
    Label2: TLabel;
    Label3: TLabel;
    btFiltrar: TBitBtn;
    btLimparFiltro: TBitBtn;
    procedure rgCpfCnpjClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btFiltrarClick(Sender: TObject);
    procedure btLimparFiltroClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmFiltro: TfrmFiltro;

implementation

uses uConsultFornecedores, uDM, uEmpresas, uFornecedores, uPrincipal,
  uProcedimentosPadroes;

{$R *.dfm}

procedure TfrmFiltro.rgCpfCnpjClick(Sender: TObject);
begin
  if rgCpfCnpj.ItemIndex = 0 then
     edFiltroCpfCnpj.EditMask := '999.999.999-99;1;_'
  else
     edFiltroCpfCnpj.EditMask := '99.999.999/9999-99;1;_';

end;

procedure TfrmFiltro.FormCreate(Sender: TObject);
begin
  edFiltroCpfCnpj.EditMask := '999.999.999-99;1;_';
end;

procedure TfrmFiltro.btFiltrarClick(Sender: TObject);
var
  wRetiraAND: string;
begin

  DM.tbFornecedores.Filtered := false;
  //filtro Nome do fornecedor
  if edFiltroNome.text <> '' then
     DM.tbFornecedores.Filter := 'bdNOMEFORNECEDORES =' + QuotedStr(edFiltroNome.Text)  + 'AND ';

  //filtro cpf/cnpj
  if rgCpfCnpj.ItemIndex = 0 then
     DM.tbFornecedores.Filter := 'bdCPF =' + QuotedStr(edFiltroCpfCnpj.Text)+ 'AND '
  else
     DM.tbFornecedores.Filter := 'bdCNPJFORNECEDORES' + QuotedStr(edFiltroCpfCnpj.Text) + 'AND ';

  //filtro data/hora de cadastro
  if (edFiltroDataDe.Text = '  /  /    ') and (edFiltroDataAte.Text <> '  /  /    ') then
     DM.tbFornecedores.Filter := 'bdDATAHORACAD <=' + QuotedStr(edFiltroDataAte.Text + ' 23:59:59') + 'AND ';

  if (edFiltroDataDe.Text <> '  /  /    ') and (edFiltroDataAte.Text <> '  /  /    ')  then
     DM.tbFornecedores.Filter := 'bdDATAHORACAD >=' + QuotedStr(edFiltroDataDe.Text + ' 00:00:01') + 'AND '
                                +'bdDATAHORACAD <='+ QuotedStr(edFiltroDataAte.Text + ' 23:59:59');

  //retirando o AND do final de todo o filtro
  Copy(DM.tbFornecedores.Filter, )

  Dm.tbFornecedores.Filtered := True;


  //DM.tbFornecedores.Locate('bdNOMEFORNECEDORES', edFiltroNome.Text, [loPartialKey]);
        {
  DM.QUERY.Close;
  DM.QUERY.SQL.Clear;
  DM.QUERY.SQL.Add('select bdNOMEFORNECEDORES from tbFornecedores.db where bdNOMEFORNECEDORES =:pNome');
  DM.QUERY.ParamByName('pNome').AsString := edFiltroNome.Text;
  DM.QUERY.Open;
         }

end;

procedure TfrmFiltro.btLimparFiltroClick(Sender: TObject);
begin
  DM.tbFornecedores.Filtered := False;

  edFiltroNome.Clear;

  edFiltroCpfCnpj.Clear;

  edFiltroDataDe.Clear;

  edFiltroDataAte.Clear;
end;

end.
